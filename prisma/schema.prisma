// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    // previewFeatures = ["extendedWhereUnique"] 可以隐藏了，新版本已经内置了该功能
    binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

//datasource db {
//  provider = "mysql"
//  url      = env("DATABASE_URL")
//}
model User {
    id            Int            @id @default(autoincrement())
    email         String         @unique
    username      String         @unique
    nickname      String
    password      String
    avatar        String
    tel           String?
    role          String         @default("USER") // USER: 普通用户权限 ADMIN: 管理员权限
    createdAt     DateTime       @default(now())
    updatedAt     DateTime?      @updatedAt
    articles      Article[]
    comments      Comment[]
    replyComments ReplyComment[]
    categories    Category[]
    tags          Tag[]
    Config        Config[]
}

model Article {
    id         Int       @id @default(autoincrement())
    title      String
    desc       String?
    content    String?
    en_content String?
    published  Boolean   @default(false)
    author     User      @relation(fields: [authorId], references: [id])
    authorId   Int
    createdAt  DateTime  @default(now())
    updatedAt  DateTime? @updatedAt
    tags       Tag[]
    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId Int?
    comments   Comment[]
}

model Tag {
    id        Int       @id @default(autoincrement())
    name      String
    articles  Article[]
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

// 分类，有父子关系
model Category {
    id        Int       @id @default(autoincrement())
    name      String
    articles  Article[]
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    childCategories Category[] @relation(name: "ChildCategories") // 子回复
    childCategory   Category   @relation(name: "ChildCategories", fields: [childCategoryId], references: [id])
    childCategoryId Int
}

model Comment {
    id           Int            @id @default(autoincrement())
    title        String
    content      String?
    article      Article        @relation(fields: [articleId], references: [id])
    articleId    Int
    user         User           @relation(fields: [userId], references: [id])
    userId       Int
    createdAt    DateTime       @default(now())
    updatedAt    DateTime?      @updatedAt
    ReplyComment ReplyComment[]
}

// 回复，有父子关系
model ReplyComment {
    id        Int     @id @default(autoincrement())
    title     String
    content   String?
    comment   Comment @relation(fields: [commentId], references: [id])
    commentId Int
    user      User    @relation(fields: [userId], references: [id])
    userId    Int

    // 父回复
    childComments  ReplyComment[] @relation(name: "ChildComments") // 子回复
    replyComment   ReplyComment   @relation(name: "ChildComments", fields: [replyCommentId], references: [id])
    replyCommentId Int
}

// 配置表
model Config {
    id     Int  @id @default(autoincrement())
    user   User @relation(fields: [userId], references: [id])
    userId Int

    key      String
    value    String?
    describe String?
}

// 站点配置表
model SiteConfig {
    id Int @id @default(autoincrement())

    key      String  @unique()
    value    String?
    describe String?
}
